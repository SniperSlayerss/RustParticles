use bevy::prelude::*;
use bevy_prototype_lyon::prelude::*;

fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .add_plugins(ShapePlugin)
        .add_systems(Startup, setup_system)
        .add_systems(Update, update_system)
        .run();
}

#[derive(Component)]
struct Particle;

#[derive(Component)]
struct Velocity(Vec3);

fn setup_system(mut commands: Commands) {
    commands.spawn(Camera2dBundle::default());
    let particle = shapes::Circle {
        radius: 4.0,
        center: Vec2::ZERO,
    };

    (0..100).for_each(|i| {
        commands.spawn((
            ShapeBundle {
                path: GeometryBuilder::build_as(&particle),
                spatial: SpatialBundle {
                    transform: Transform::from_translation(Vec3::new(((i as f32)-50.0) * 4.0, -i as f32, 0.0)),
                    ..Default::default()
                },
                ..Default::default()
            },
            Fill::color(Color::WHITE),
            Stroke::new(Color::BLACK, 1.0),
            Particle,
            Velocity(Vec3::new(0.0, 0.0, 0.0)),
        ));
    });
}

fn update_system(time: Res<Time>, mut query: Query<(&mut Transform, &mut Velocity), With<Particle>>,) {
    let delta_time = time.delta_seconds();
    let gravity = Vec3::new(0.0, -9.8 * 10.0, 0.0);

    for (mut transform, mut velocity) in query.iter_mut() {
        // Apply gravity to velocity
        velocity.0 += gravity * delta_time;

        // Update the position based on the velocity
        transform.translation += velocity.0 * delta_time;

        // Ensure the circle stays within bounds
        if transform.translation.distance(Vec3::ZERO) > 200 {
            let angle = velocity.0.y.atan2(velocity.0.x);
            transform.translation = Vec3::new(4.0 * transform.translation.x.cos(), 4.0 * transform.translation.y.sin(), 0);
            velocity.0 = velocity.0 * -0.9; // Stop the circle when it goes out of bounds
        }
    }
}
